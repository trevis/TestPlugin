name: 'Build'
on:
  release:
    types: [released, prereleased]
  push:
    branches:
      - master
      - main
jobs:
  build:
    permissions:
      packages: write
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure Manifest Beta Version
        if: ${{ (github.ref == 'refs/heads/master') || (github.ref == 'refs/heads/main') && github.event.release.prerelease }}
        run: echo "$( jq '.version = "${{ github.event.release.tag_name }}"' ${{ github.workspace }}/manifest.json )" > ${{ github.workspace }}/manifest.json

      - name: Setup Release Manifest Variables
        if: ${{ (github.ref != 'refs/heads/master') && (github.ref != 'refs/heads/main') }}
        run: |
          # get release version from manifest.json
          export CZ_PLUGIN_MANIFEST="${{ github.workspace }}/manifest.json"
          export CZ_PLUGIN_VERSION="$(cat $CZ_PLUGIN_MANIFEST | jq -r '.version')"

          # pass variables to next steps
          echo "CZ_PLUGIN_MANIFEST=$CZ_PLUGIN_MANIFEST" >> $GITHUB_ENV
          echo "CZ_PLUGIN_VERSION=$CZ_PLUGIN_VERSION" >> $GITHUB_ENV

      - name: Setup Beta Manifest Variables
        if: ${{ (github.ref == 'refs/heads/master') || (github.ref == 'refs/heads/main') }}
        run: |
          # get beta version from manifest.json
          export CZ_PLUGIN_MANIFEST="${{ github.workspace }}/manifest.json"
          export CZ_PLUGIN_VERSION="$(cat $CZ_PLUGIN_MANIFEST | jq -r '.version')-beta-$(date +%Y%m%d%H%M%S)"

          # pass variables to next steps
          echo "CZ_PLUGIN_MANIFEST=$CZ_PLUGIN_MANIFEST" >> $GITHUB_ENV
          echo "CZ_PLUGIN_VERSION=$CZ_PLUGIN_VERSION" >> $GITHUB_ENV

      - name: Build
        run: |
          # build
          export CZ_PLUGIN_NAME="$(cat ${{ env.CZ_PLUGIN_MANIFEST }} | jq -r '.name')"
          export CZ_PLUGIN_PACKAGE_NAME="${CZ_PLUGIN_NAME}.${{ env.CZ_PLUGIN_VERSION }}"
          export CZ_NUGET_PATH="${{ github.workspace }}/bin/${CZ_PLUGIN_PACKAGE_NAME}.nupkg"

          # pass variables to next steps
          echo "CZ_PLUGIN_PACKAGE_NAME=$CZ_PLUGIN_PACKAGE_NAME" >> $GITHUB_ENV
          echo "CZ_NUGET_PATH=$CZ_NUGET_PATH" >> $GITHUB_ENV

          # build
          dotnet restore
          dotnet build -c Release --no-restore -p:PackageVersion=${{ env.CZ_PLUGIN_VERSION }} -p:ChoriziteSetPackageVersion=False
        
      - name: Package plugin.zip for release
        run: |
          cd "${{ github.workspace }}/bin/net8.0/"
          zip -r "${{ github.workspace }}/bin/${{ env.CZ_PLUGIN_PACKAGE_NAME }}.zip" ./*
          ls -lah "${{ github.workspace }}/bin/"

      - uses: actions/upload-artifact@v4
        with: 
          name: "${{ env.CZ_PLUGIN_PACKAGE_NAME }}.nupkg"
          path: "${{ env.CZ_NUGET_PATH }}"

      - uses: actions/upload-artifact@v4
        with: 
          name: "${{ env.CZ_PLUGIN_PACKAGE_NAME }}.zip"
          path: "${{ github.workspace }}/bin/net8.0/"
      
      - name: Upload release binaries
        if: ${{ (github.ref != 'refs/heads/master') && (github.ref != 'refs/heads/main') }}
        uses: alexellis/upload-assets@0.4.0
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          asset_paths: '["${{ github.workspace }}/bin/${{ env.CZ_PLUGIN_PACKAGE_NAME }}.zip"]'

      - name: Push GitHub NuGet Package
        run: |
          dotnet nuget add source --username ${{ github.repository_owner }} --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"
          dotnet nuget push "${{ env.CZ_NUGET_PATH }}" --api-key ${{ secrets.GITHUB_TOKEN }} --source "github"